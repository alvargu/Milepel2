#!/bin/python3

from sense_hat import SenseHat
sense = SenseHat()
import time
import random

A = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

B = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (248, 231, 28), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (245, 166, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

C = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (0, 0, 0), (248, 231, 28), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (248, 231, 28), (248, 231, 28), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (245, 166, 35), (245, 166, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (248, 231, 28), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

D = [
      (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0), (219, 219, 219), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (0, 0, 0), (219, 219, 219), (155, 155, 155), (255, 233, 12), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (219, 219, 219), (155, 155, 155), (155, 155, 155), (248, 194, 28), (255, 233, 12), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (248, 194, 28), (248, 194, 28), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (248, 194, 28), (248, 194, 28), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (219, 219, 219), (155, 155, 155), (155, 155, 155), (248, 194, 28), (255, 233, 12), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (219, 219, 219), (155, 155, 155), (255, 233, 12), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (219, 219, 219), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

E = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (219, 219, 219), (255, 236, 68), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (219, 219, 219), (155, 155, 155), (245, 208, 35), (255, 236, 68), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (219, 219, 219), (155, 155, 155), (245, 135, 35), (245, 208, 35), (255, 236, 68), (255, 236, 68), (0, 0, 0),
    (219, 219, 219), (155, 155, 155), (155, 155, 155), (245, 208, 35), (245, 208, 35), (255, 236, 68), (255, 236, 68), (0, 0, 0),
    (219, 219, 219), (155, 155, 155), (155, 155, 155), (245, 208, 35), (255, 236, 68), (245, 208, 35), (255, 236, 68), (0, 0, 0),
    (0, 0, 0), (219, 219, 219), (155, 155, 155), (255, 236, 68), (245, 208, 35), (245, 135, 35), (255, 236, 68), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (219, 219, 219), (155, 155, 155), (255, 236, 68), (255, 236, 68), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (219, 219, 219), (255, 236, 68), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

F = [
      (0, 0, 0), (0, 0, 0), (219, 219, 219), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (219, 219, 219), (155, 155, 155), (245, 208, 35), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (219, 219, 219), (155, 155, 155), (245, 208, 35), (245, 208, 35), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (245, 135, 35), (245, 208, 35), (245, 208, 35), (240, 183, 122), (240, 183, 122), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (245, 208, 35), (245, 208, 35), (255, 236, 68), (119, 82, 48), (119, 82, 48), (0, 0, 0),
    (219, 219, 219), (155, 155, 155), (245, 208, 35), (245, 135, 35), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (219, 219, 219), (155, 155, 155), (245, 208, 35), (245, 135, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (219, 219, 219), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

G = [
      (0, 0, 0), (219, 219, 219), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (219, 219, 219), (155, 155, 155), (245, 208, 35), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (245, 208, 35), (245, 208, 35), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (245, 135, 35), (245, 208, 35), (245, 208, 35), (240, 183, 122), (240, 183, 122), (240, 183, 122), (0, 0, 0),
    (155, 155, 155), (245, 208, 35), (245, 208, 35), (245, 208, 35), (119, 82, 48), (119, 82, 48), (119, 82, 48), (0, 0, 0),
    (155, 155, 155), (245, 208, 35), (245, 135, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (219, 219, 219), (155, 155, 155), (245, 208, 35), (245, 135, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (219, 219, 219), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

H = [
      (219, 219, 219), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (245, 208, 35), (245, 135, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (245, 208, 35), (245, 208, 35), (245, 208, 35), (233, 233, 231), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (245, 135, 35), (245, 208, 35), (245, 208, 35), (155, 155, 155), (240, 183, 122), (240, 183, 122), (240, 183, 122), (0, 0, 0),
    (245, 208, 35), (245, 208, 35), (245, 208, 35), (155, 155, 155), (119, 82, 48), (119, 82, 48), (119, 82, 48), (0, 0, 0),
    (245, 208, 35), (245, 135, 35), (245, 135, 35), (233, 233, 231), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (245, 208, 35), (245, 135, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (219, 219, 219), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

I = [
      (245, 208, 35), (233, 233, 231), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (245, 208, 35), (0, 0, 0), (233, 233, 231), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (245, 135, 35), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (245, 208, 35), (245, 135, 35), (155, 155, 155), (155, 155, 155), (240, 183, 122), (240, 183, 122), (240, 183, 122), (0, 0, 0),
    (245, 208, 35), (245, 208, 35), (155, 155, 155), (155, 155, 155), (119, 82, 48), (119, 82, 48), (119, 82, 48), (0, 0, 0),
    (245, 208, 35), (245, 135, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (245, 208, 35), (0, 0, 0), (233, 233, 231), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (245, 208, 35), (233, 233, 231), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

J = [
      (0, 0, 0), (233, 233, 231), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (245, 135, 35), (155, 155, 155), (155, 155, 155), (155, 155, 155), (240, 183, 122), (240, 183, 122), (240, 183, 122), (0, 0, 0),
    (245, 208, 35), (155, 155, 155), (155, 155, 155), (155, 155, 155), (119, 82, 48), (119, 82, 48), (119, 82, 48), (0, 0, 0),
    (245, 135, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (233, 233, 231), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

K = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (240, 183, 122), (240, 183, 122), (240, 183, 122), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (119, 82, 48), (119, 82, 48), (119, 82, 48), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

L = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (240, 183, 122), (240, 183, 122), (240, 183, 122),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (119, 82, 48), (119, 82, 48), (119, 82, 48),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

M = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (240, 183, 122), (240, 183, 122),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (119, 82, 48), (119, 82, 48),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

N = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (240, 183, 122),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (119, 82, 48),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

O = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

TOM = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

ETT = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

ETTX = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

TO = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]
  
TOX = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

TRE = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

TREX = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

FIRE = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

FIREX = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

FEM = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

FEMX = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

SEKS = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

def spinn():
  for i in range(4):
    sense.set_rotation(270)
    time.sleep(0.1)
    sense.set_rotation(90)
    time.sleep(0.1)
    sense.set_rotation(180)
    time.sleep(0.1)
    sense.set_rotation(0)



def avfyrt():
  sense.set_pixels(A)
  time.sleep(0.1)
  sense.set_pixels(B)
  time.sleep(0.1)
  sense.set_pixels(C)
  time.sleep(0.1)
  sense.set_pixels(D)
  time.sleep(0.1)
  sense.set_pixels(E)
  time.sleep(0.1)
  sense.set_pixels(F)
  time.sleep(0.1)
  sense.set_pixels(G)
  time.sleep(0.1)
  sense.set_pixels(H)
  time.sleep(0.1)
  sense.set_pixels(I)
  time.sleep(0.1)
  sense.set_pixels(J)
  time.sleep(0.1)
  sense.set_pixels(K)
  time.sleep(0.1)
  sense.set_pixels(L)
  time.sleep(0.1)
  sense.set_pixels(M)
  time.sleep(0.1)
  sense.set_pixels(N)
  time.sleep(0.1)
  sense.set_pixels(O)
  time.sleep(0.1)

def log_score(score):
  poeng = str(score)
  with open('scorelist.csv', 'a') as f:
    f.write(poeng)

def forside():
  sense.set_pixels(TOM)
  ladning = [TOM, ETT, TO, TRE, FIRE, FEM, SEKS]
  ladning2 = [TOM, ETTX, TOX, TREX, FIREX, FEMX, SEKS]
  antallkuler = []
  while True:
    for event in sense.stick.get_events():
      if event.action == 'pressed':
        if event.direction == 'up':
          if len(antallkuler) != 6:
            n = 1
            antallkuler.append(n)
            index = list.count(antallkuler, 1)
            if index <= 6 and index >= 0:
              sense.set_pixels(ladning[index])
        elif event.direction == 'down':
          if len(antallkuler) != 0:
            del antallkuler[0]
            index = list.count(antallkuler, 1)
            sense.set_pixels(ladning[index])
        elif event.direction == 'middle':
          for i in range(6 - len(antallkuler)):
            n = 0
            antallkuler.append(0)
          sense.show_message('Hoyre for multi - Venstre for single', 0.02)
          print(antallkuler)
          for event in sense.stick.get_events():
            if event.action == 'pressed':
              if event.direction == 'right':
                sense.set_pixels(ladning2[index])
                spinn()
                spillflere(antallkuler)
              elif event.direction == 'left':
                sense.set_pixels(ladning2[index])
                spinn()
                spillalene(antallkuler)

def spillalene(antallkuler):
  magasin = random.sample(antallkuler, len(antallkuler))
  i = 0
  score = 0
  while True:
    sense.set_pixels(A)
    for event in sense.stick.get_events():
      if event.action == 'pressed':
        if i == 6:
          sense.show_message('GAME OVER')
        elif magasin[i] == 1:
          avfyrt()
          sense.show_message('DEAD')
          del magasin[i]
          magasin.insert(i, 0)
          print(magasin)
          forside()
        else:
          print(magasin)
        i += 1
      elif event.action == 'held':
        score = i * 1000 + magasin.count(1) * 1000
        sense.show_message(str(score))
        log_score(score)
        forside()

def spillflere(antallkuler):
  magasin = random.sample(antallkuler, len(antallkuler))
  i = 0
  score = 0
  while True:
    sense.set_pixels(A)
    for event in sense.stick.get_events():
      if event.action == 'pressed':
        if i == 6:
          sense.show_message('GAME OVER')
          forside()
        elif magasin[i] == 1:
          avfyrt()
          del magasin[i]
          magasin.insert(i, 0)
          print(magasin)
        else:
          print(magasin)
        i += 1    
  
forside()

