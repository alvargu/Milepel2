#!/bin/python3
# -*- coding: utf-8 -*-

from sense_hat import SenseHat
sense = SenseHat()
import time
import random
from animasjoner_milepel2 import *

A = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

B = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (248, 231, 28), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (245, 166, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

C = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (0, 0, 0), (248, 231, 28), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (248, 231, 28), (248, 231, 28), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (245, 166, 35), (245, 166, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (248, 231, 28), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

D = [
      (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0), (219, 219, 219), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (0, 0, 0), (219, 219, 219), (155, 155, 155), (255, 233, 12), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (219, 219, 219), (155, 155, 155), (155, 155, 155), (248, 194, 28), (255, 233, 12), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (248, 194, 28), (248, 194, 28), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (248, 194, 28), (248, 194, 28), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (219, 219, 219), (155, 155, 155), (155, 155, 155), (248, 194, 28), (255, 233, 12), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (219, 219, 219), (155, 155, 155), (255, 233, 12), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (219, 219, 219), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

E = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (219, 219, 219), (255, 236, 68), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (219, 219, 219), (155, 155, 155), (245, 208, 35), (255, 236, 68), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (219, 219, 219), (155, 155, 155), (245, 135, 35), (245, 208, 35), (255, 236, 68), (255, 236, 68), (0, 0, 0),
    (219, 219, 219), (155, 155, 155), (155, 155, 155), (245, 208, 35), (245, 208, 35), (255, 236, 68), (255, 236, 68), (0, 0, 0),
    (219, 219, 219), (155, 155, 155), (155, 155, 155), (245, 208, 35), (255, 236, 68), (245, 208, 35), (255, 236, 68), (0, 0, 0),
    (0, 0, 0), (219, 219, 219), (155, 155, 155), (255, 236, 68), (245, 208, 35), (245, 135, 35), (255, 236, 68), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (219, 219, 219), (155, 155, 155), (255, 236, 68), (255, 236, 68), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (219, 219, 219), (255, 236, 68), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

F = [
      (0, 0, 0), (0, 0, 0), (219, 219, 219), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (219, 219, 219), (155, 155, 155), (245, 208, 35), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (219, 219, 219), (155, 155, 155), (245, 208, 35), (245, 208, 35), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (245, 135, 35), (245, 208, 35), (245, 208, 35), (240, 183, 122), (240, 183, 122), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (245, 208, 35), (245, 208, 35), (255, 236, 68), (119, 82, 48), (119, 82, 48), (0, 0, 0),
    (219, 219, 219), (155, 155, 155), (245, 208, 35), (245, 135, 35), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (219, 219, 219), (155, 155, 155), (245, 208, 35), (245, 135, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (219, 219, 219), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

G = [
      (0, 0, 0), (219, 219, 219), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (219, 219, 219), (155, 155, 155), (245, 208, 35), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (245, 208, 35), (245, 208, 35), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (245, 135, 35), (245, 208, 35), (245, 208, 35), (240, 183, 122), (240, 183, 122), (240, 183, 122), (0, 0, 0),
    (155, 155, 155), (245, 208, 35), (245, 208, 35), (245, 208, 35), (119, 82, 48), (119, 82, 48), (119, 82, 48), (0, 0, 0),
    (155, 155, 155), (245, 208, 35), (245, 135, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (219, 219, 219), (155, 155, 155), (245, 208, 35), (245, 135, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (219, 219, 219), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

H = [
      (219, 219, 219), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (245, 208, 35), (245, 135, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (245, 208, 35), (245, 208, 35), (245, 208, 35), (233, 233, 231), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (245, 135, 35), (245, 208, 35), (245, 208, 35), (155, 155, 155), (240, 183, 122), (240, 183, 122), (240, 183, 122), (0, 0, 0),
    (245, 208, 35), (245, 208, 35), (245, 208, 35), (155, 155, 155), (119, 82, 48), (119, 82, 48), (119, 82, 48), (0, 0, 0),
    (245, 208, 35), (245, 135, 35), (245, 135, 35), (233, 233, 231), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (245, 208, 35), (245, 135, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (219, 219, 219), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

I = [
      (245, 208, 35), (233, 233, 231), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (245, 208, 35), (0, 0, 0), (233, 233, 231), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (245, 135, 35), (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (245, 208, 35), (245, 135, 35), (155, 155, 155), (155, 155, 155), (240, 183, 122), (240, 183, 122), (240, 183, 122), (0, 0, 0),
    (245, 208, 35), (245, 208, 35), (155, 155, 155), (155, 155, 155), (119, 82, 48), (119, 82, 48), (119, 82, 48), (0, 0, 0),
    (245, 208, 35), (245, 135, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (245, 208, 35), (0, 0, 0), (233, 233, 231), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (245, 208, 35), (233, 233, 231), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

J = [
      (0, 0, 0), (233, 233, 231), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (245, 208, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (245, 135, 35), (155, 155, 155), (155, 155, 155), (155, 155, 155), (240, 183, 122), (240, 183, 122), (240, 183, 122), (0, 0, 0),
    (245, 208, 35), (155, 155, 155), (155, 155, 155), (155, 155, 155), (119, 82, 48), (119, 82, 48), (119, 82, 48), (0, 0, 0),
    (245, 135, 35), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (233, 233, 231), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

K = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (240, 183, 122), (240, 183, 122), (240, 183, 122), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (119, 82, 48), (119, 82, 48), (119, 82, 48), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

L = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (240, 183, 122), (240, 183, 122), (240, 183, 122),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (119, 82, 48), (119, 82, 48), (119, 82, 48),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

M = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (240, 183, 122), (240, 183, 122),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (119, 82, 48), (119, 82, 48),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

N = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (240, 183, 122),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (119, 82, 48),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

O = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

TOM = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

ETT = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

ETTX = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

TO = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]
  
TOX = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

TRE = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

TREX = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

FIRE = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

FIREX = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

FEM = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

FEMX = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

SEKS = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (155, 155, 155), (236, 217, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0),
    (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (155, 155, 155), (233, 140, 0), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (155, 155, 155), (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

FAKE_BANG = [
      (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (0, 0, 0), (155, 155, 155), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
    (155, 155, 155), (155, 155, 155), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (208, 2, 27), (155, 155, 155),
    (155, 155, 155), (155, 155, 155), (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (255, 255, 255), (255, 255, 255), (255, 255, 255), (0, 0, 0),
    (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0), (0, 0, 0),
  ]

def spinn():
  for i in range(4):
    sense.set_rotation(270)
    time.sleep(0.1)
    sense.set_rotation(90)
    time.sleep(0.1)
    sense.set_rotation(180)
    time.sleep(0.1)
    sense.set_rotation(0)



def avfyrt():
  sense.set_pixels(animasjoner("A"))
  time.sleep(0.1)
  sense.set_pixels(animasjoner("B"))
  time.sleep(0.1)
  sense.set_pixels(animasjoner("C"))
  time.sleep(0.1)
  sense.set_pixels(animasjoner("D"))
  time.sleep(0.1)
  sense.set_pixels(animasjoner("E"))
  time.sleep(0.1)
  sense.set_pixels(animasjoner("F"))
  time.sleep(0.1)
  sense.set_pixels(animasjoner("G"))
  time.sleep(0.1)
  sense.set_pixels(animasjoner("H"))
  time.sleep(0.1)
  sense.set_pixels(animasjoner("I"))
  time.sleep(0.1)
  sense.set_pixels(animasjoner("J"))
  time.sleep(0.1)
  sense.set_pixels(animasjoner("K"))
  time.sleep(0.1)
  sense.set_pixels(animasjoner("L"))
  time.sleep(0.1)
  sense.set_pixels(animasjoner("M"))
  time.sleep(0.1)
  sense.set_pixels(animasjoner("N"))
  time.sleep(0.1)
  sense.set_pixels(animasjoner("O"))
  time.sleep(0.1)


def log_score(score):
  
  # Her henter vi inn de riktige standardmodulene
  import csv 
  import datetime as dt 

  # Her blir den riktige dataen hentet inn.
  # Poeng som kommer fra argumentet til funksjonen og tidspunktet til når funksjonen blir kjørt.
  poeng = str(score)
  tidspunkt = dt.datetime.now() 
    
  # Disse variablene brukes til csv.DictWriter funksjonen i variabelen log_score_once.
  fieldnames = ["Score", "Tidspunkt"]   
  dictionary = [{"Score" : f"{poeng}", "Tidspunkt" : f"{tidspunkt}"}] 
  
  counting_number = 0
  counting_number_1 = 0 
  iterator_for_dictionaries_from_CSV_1 = 0 # Iteratorer brukt i funksjonen.
  dictionary_SenseHat = dict([])
  dictionary_SenseHat_result = dict([])
  nested_dictionaries = dict([])
  listed_dictionaries = []
      
  # Her er lagringen av dataen i dictionaries brukt ulike steder i funksjonen.
  
  # Den første delen av koden åpner filen scorelist.csv. Den legger inn dataen den akkurat har samlet inn. Den passer også på om filen er tom, og hvis den er det
  # så vil den legge til en header i toppen.
  with open('scorelist.csv', 'a', newline="" ) as f:
    log_score_once = csv.DictWriter(f, fieldnames = fieldnames)
     
    with open("scorelist.csv", "r") as f_init:
        content = f_init.readline()
        if len(content) == 0:
            log_score_once.writeheader()
    
    log_score_once.writerows(dictionary)
  
  # Denne delen av koden er rettet mot visningen av det beste resultatet på rpi'en.
  # Den henter inn all data fra filen scorelist.csv og sorterer den etter resultat i poeng.
  with open("scorelist.csv", "r") as f:
    dictionaries_from_CSV = csv.DictReader(f)
    
    # Det er gjennomgående i koden at for-løkkene bruker iteratorer for å identifsere linjenummer. Linjenummeret blir brukt som nøkkel i dictionaryene.
    for dictionary_in_dictionaries_from_CSV in dictionaries_from_CSV:
        dictionary_SenseHat.update({counting_number : dictionary_in_dictionaries_from_CSV})
        counting_number += 1
    
    for iterator in range(len(dictionary_SenseHat)):
        if counting_number_1 < float(dictionary_SenseHat[iterator]["Score"]):
            counting_number_1 = float(dictionary_SenseHat[iterator]["Score"])
            dictionary_SenseHat_result = dictionary_SenseHat[iterator]
  
  # Dette er en liten, men viktig del av koden når det kommer til resultatlisten. Den sletter alt innhold i filen Topp5.csv.
  # Det blir gjort for at den nye resultatlisten ikke skal legge seg under den forrige.
  f = open("Topp5.csv", "w+")
  f.close()
  
  # Denne delen henter inn data fra scorelist.csv, deretter legger den dataen i en nye dictionary med en ny nøkkel. 
  with open("scorelist.csv", "r")  as f:
    dictionaries_from_CSV_1 = csv.DictReader(f)
    
    for dictionary_in_dictionaries_from_CSV_1 in dictionaries_from_CSV_1:
        nested_dictionaries.update({iterator_for_dictionaries_from_CSV_1 : dictionary_in_dictionaries_from_CSV_1})
        iterator_for_dictionaries_from_CSV_1 += 1
  
  # Denne for-løkken henter data fra den forrige dictionaryen. Deretter legger den det inn i en liste som skal bli sortert etter resultatet i score.
  for iterator_1 in range(len(nested_dictionaries)):
     listed_dictionaries.append([iterator_1,{ "Score":float(nested_dictionaries[iterator_1]["Score"]),"Tidspunkt":nested_dictionaries[iterator_1]["Tidspunkt"]}])
  
  # På denne måten har vi sortert all dataen fra filen scorelist.csv, og ikke kun funnet den med best resultat.  
  sorted_objects = sorted(listed_dictionaries, reverse = True, key = lambda x: x[1]["Score"])
  
  # Den siste for-løkken gjør det samme som den første, men denne legger resultatet inn i en ny fil som heter Topp5.csv
  for iterator_2 in range(len(sorted_objects)):
      dictionary_1 =  [{"Plassering" : f"{iterator_2 + 1}", "Score" : f"{sorted_objects[iterator_2][1]['Score']}", "Tidspunkt" : f"{sorted_objects[iterator_2][1]['Tidspunkt']}"}]
      fieldnames_1 = ["Plassering", "Score", "Tidspunkt"]
      with open("Topp5.csv", "a", newline= "") as f:
          Topp5_fil = csv.DictWriter(f, fieldnames = fieldnames_1)
              
          with open("Topp5.csv", "r") as f_init_1:
              content_1 = f_init_1.readline()
              if len(content_1) == 0:
                  Topp5_fil.writeheader()
              
          Topp5_fil.writerows(dictionary_1)
   
  # Her blir det beste resultatet vist på rpi'en.
  sense.show_message(f"Hoyeste Score: {dictionary_SenseHat_result['Score']}, Tidspunktet var: {dictionary_SenseHat_result['Tidspunkt']}.")




def rekyl():
  while True:
    gyroscope1 = sense.get_gyroscope()
    gyroYaw1 = '{yaw}'.format(**gyroscope1)
    u1 = float(gyroYaw1)
    time.sleep(0.2)
    gyroscope2 = sense.get_gyroscope()
    gyroYaw2 = '{yaw}'.format(**gyroscope2)
    u2 = float(gyroYaw2)
    print('Ikke skutt')
    if u2 - u1 > 25:
      break

def forside():
  sense.show_message('Opp -> +1, Ned -> -1')
  sense.set_pixels(animasjoner("TOM"))
  ladning = [animasjoner("TOM"), animasjoner("ETT"), animasjoner("TO"), animasjoner("TRE"), animasjoner("FIRE"), animasjoner("FEM"), animasjoner("SEKS")]
  ladning2 = [animasjoner("TOM"), animasjoner("ETTX"), animasjoner("TOX"), animasjoner("TREX"), animasjoner("FIREX"), animasjoner("FEMX"), animasjoner("SEKS")]
  antallkuler = []
  while True:
    for event in sense.stick.get_events():
      if event.action == 'pressed':
        if event.direction == 'up':
          if len(antallkuler) != 6:
            n = 1
            antallkuler.append(n)
            index = list.count(antallkuler, 1)
            if index <= 6 and index >= 0:
              sense.set_pixels(ladning[index])
        elif event.direction == 'down':
          if len(antallkuler) != 0:
            del antallkuler[0]
            index = list.count(antallkuler, 1)
            sense.set_pixels(ladning[index])
        elif event.direction == 'middle':
          for i in range(6 - len(antallkuler)):
            n = 0
            antallkuler.append(0)
          sense.show_message('Hoyre for multi - Venstre for single', 0.02)
          print(antallkuler)
          for event in sense.stick.get_events():
            if event.action == 'pressed':
              if event.direction == 'right':
                sense.set_pixels(ladning2[index])
                spinn()
                spillflere(antallkuler)
              elif event.direction == 'left':
                sense.set_pixels(ladning2[index])
                spinn()
                spillalene(antallkuler)

def fakeBang():
  sense.set_pixels(animasjoner("FAKE_BANG"))
  time.sleep(1)

def spillalene(antallkuler):
  magasin = random.sample(antallkuler, len(antallkuler))
  i = 0
  score = 0
  while True:
    sense.set_pixels(animasjoner("A"))
    for event in sense.stick.get_events():
      if event.action == 'pressed':
        if i == 6:
          sense.show_message('GAME OVER')
        elif magasin[i] == 1:
          rekyl()
          avfyrt()
          sense.show_message('DEAD')
          del magasin[i]
          magasin.insert(i, 0)
          print(magasin)
          forside()
        else:
          rekyl()
          fakeBang()
          print(magasin)
        i += 1
      elif event.action == 'held':
        fakeBang()
        score = i * 1000 + magasin.count(1) * 1000
        sense.show_message('Din score: ' + str(score))
        log_score(score)
        forside()

def spillflere(antallkuler):
  magasin = random.sample(antallkuler, len(antallkuler))
  i = 0
  score = 0
  while True:
    sense.set_pixels(animasjoner("A"))
    for event in sense.stick.get_events():
      if event.action == 'pressed':
        if i == 6:
          sense.show_message('GAME OVER')
          forside()
        elif magasin[i] == 1:
          rekyl()
          avfyrt()
          del magasin[i]
          magasin.insert(i, 0)
          print(magasin)
        else:
          rekyl()
          fakeBang()
          print(magasin)
        i += 1    
  
forside()

